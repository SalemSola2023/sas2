{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red31\green31\blue31;\red239\green239\blue239;\red144\green1\blue18;
\red255\green255\blue254;\red31\green31\blue31;\red239\green239\blue239;}
{\*\expandedcolortbl;;\cssrgb\c16078\c16078\c16078;\cssrgb\c94902\c94902\c94902;\cssrgb\c63922\c8235\c8235;
\cssrgb\c100000\c100000\c99608;\cssrgb\c16078\c16078\c16078;\cssrgb\c94902\c94902\c94902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
import
\f1\b0  flask\cb1 \

\f0\b \cb3 import
\f1\b0  pickle\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\i \cf2 \cb3 # Use pickle to load in the pre-trained model.
\f1\i0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb3 with
\f1\b0  open(f'model/
\f3\fs28 \cf4 \cb5 Forecastingmodel
\f1\fs32 \cf2 \cb3 .pkl', 'rb') 
\f0\b as
\f1\b0  f:\cb1 \
\cb3     model 
\f0\b =
\f1\b0  pickle.load(f)\cb1 \
\cb3 app 
\f0\b =
\f1\b0  flask.Flask(__name__, template_folder
\f0\b =
\f1\b0 'templates')\cb1 \
\cb3 @app.route('/')\cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \outl0\strokewidth0 \strokec6 @app.route('/', methods
\f0\b =
\f1\b0 ['GET', 'POST'])\cb1 \

\f0\b \cb7 def
\f1\b0  main():\cb1 \
\cb7     
\f0\b if
\f1\b0  flask.request.method 
\f0\b ==
\f1\b0  'GET':\cb1 \
\cb7         
\f0\b return
\f1\b0 (flask.render_template('main.html'))\cb1 \
\cb7     
\f0\b if
\f1\b0  flask.request.method 
\f0\b ==
\f1\b0  'POST':\cb1 \
\cb7         temperature 
\f0\b =
\f1\b0  flask.request.form['temperature']\cb1 \
\cb7         humidity 
\f0\b =
\f1\b0  flask.request.form['humidity']\cb1 \
\cb7         windspeed 
\f0\b =
\f1\b0  flask.request.form['windspeed']\cb1 \
\cb7         input_variables 
\f0\b =
\f1\b0  pd.DataFrame([date, time],\cb1 \
\cb7           columns
\f0\b =
\f1\b0 [\'91date\'92, \'91time\'92],\cb1 \
\cb7                                        dtype
\f0\b =
\f1\b0 float)\cb1 \
\cb7         prediction 
\f0\b =
\f1\b0  model.predict(input_variables)[0]\cb1 \
\cb7         
\f0\b return
\f1\b0  flask.render_template('main.html',\cb1 \
\cb7                                      original_input
\f0\b =
\f1\b0 \{\'91Date\'92:date,\cb1 \
\cb7                                                      \'91Time\'92:time\},\cb1 \
\cb7                                      result
\f0\b =
\f1\b0 prediction,\cb1 \
\cb7                                      )\cb1 \
}